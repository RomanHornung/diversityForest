datatemp <- data.frame(mirna)
datatemp$Ytarget <- factor(mutation[,"TP53"], levels=c(0,1))
modelmirna <- interactionfor(dependent.variable.name = "Ytarget", probability=TRUE, data=datatemp, num.tree=50000)
modelmirna$prediction.error
# 0.1969873
# mirna:
# set.seed(1234)
# datatemp <- data.frame(mirna)
# datatemp$Ytarget <- factor(mutation[,"TP53"], levels=c(0,1))
# modelmirna <- interactionfor(dependent.variable.name = "Ytarget", probability=TRUE, data=datatemp, num.tree=50000)
# modelmirna$prediction.error
load("Z:/modelmirnaoldqual.Rda")
set.seed(1234)
datatemp <- data.frame(mirna)
datatemp$Ytarget <- factor(mutation[,"TP53"], levels=c(0,1))
modelmirnanew <- myinteractionfor(dependent.variable.name = "Ytarget", probability=TRUE, data=datatemp, num.tree=50000, promispairs=lapply(modelmirna$promispairs, function(x) x-1))
modelmirnanew$prediction.error
# 0.1969873
modelmirna$prediction.error
pvals <- sapply(names(modelmirna$effectimp.qual), function(x) getinfo2(x, plotit=FALSE))
getinfo2 <- function(x, plotit=TRUE) {
xnew <- x
tempobj <- ""
if(length(grep(" small", xnew))>0 | length(grep(" large", xnew))>0) {
xnew <- gsub(" small", "", xnew)
xnew <- gsub(" large", "", xnew)
tempobj <- paste(paste(strsplit(x, split=" ")[[1]][c(2,5)], collapse=", "), ", ", sep="")
}
x1 <- strsplit(xnew, split=" AND ")[[1]][1]
x2 <- strsplit(xnew, split=" AND ")[[1]][2]
pval <- summary(glm(datatemp$Ytarget ~ datatemp[,x1]*datatemp[,x2], family=binomial))$coef[4,4]
if(plotit)
plot(datatemp[,x1], datatemp[,x2], col=datatemp$Ytarget, xlab=x1, ylab=x2, main=paste(tempobj, "p = ", pval, sep=""))
return(pval)
}
all(names(modelmirna$effectimp.qual)==names(modelmirnanew$effectimp.qual))
boxplot(pvals)
cor(modelmirna$effectimp.qual, modelmirnanew$effectimp.qual)
cor(modelmirna$effectimp.quant, modelmirnanew$effectimp.quant)
plot(modelmirna$effectimp.qual, modelmirnanew$effectimp.qual)
plot(modelmirna$effectimp.quant, modelmirnanew$effectimp.quant)
boxplot(modelmirna$effectimp.quant, modelmirnanew$effectimp.quant)
boxplot(modelmirna$effectimp.qual, modelmirnanew$effectimp.qual)
par(mfrow=c(3,2))
getinfo2(names(sort(modelmirna$effectimp.qual, decreasing=TRUE))[1])
getinfo2(names(sort(modelmirnanew$effectimp.qual, decreasing=TRUE))[1])
getinfo2(names(sort(modelmirna$effectimp.qual, decreasing=TRUE))[2])
getinfo2(names(sort(modelmirnanew$effectimp.qual, decreasing=TRUE))[2])
getinfo2(names(sort(modelmirna$effectimp.qual, decreasing=TRUE))[3])
getinfo2(names(sort(modelmirnanew$effectimp.qual, decreasing=TRUE))[3])
par(mfrow=c(1,1))
plot(modelmirna$effectimp.quant, modelmirnanew$effectimp.quant)
plot(modelmirna$effectimp.qual, modelmirnanew$effectimp.qual)
par(mfrow=c(3,2))
getinfo2(names(sort(modelmirna$effectimp.qual, decreasing=TRUE))[1])
getinfo2(names(sort(modelmirnanew$effectimp.qual, decreasing=TRUE))[1])
getinfo2(names(sort(modelmirna$effectimp.qual, decreasing=TRUE))[2])
getinfo2(names(sort(modelmirnanew$effectimp.qual, decreasing=TRUE))[2])
getinfo2(names(sort(modelmirna$effectimp.qual, decreasing=TRUE))[3])
getinfo2(names(sort(modelmirnanew$effectimp.qual, decreasing=TRUE))[3])
par(mfrow=c(1,1))
par(mfrow=c(3,2))
getinfo2(names(sort(modelmirna$effectimp.qual, decreasing=TRUE))[4])
getinfo2(names(sort(modelmirnanew$effectimp.qual, decreasing=TRUE))[4])
getinfo2(names(sort(modelmirna$effectimp.qual, decreasing=TRUE))[5])
getinfo2(names(sort(modelmirnanew$effectimp.qual, decreasing=TRUE))[5])
getinfo2(names(sort(modelmirna$effectimp.qual, decreasing=TRUE))[6])
getinfo2(names(sort(modelmirnanew$effectimp.qual, decreasing=TRUE))[6])
par(mfrow=c(1,1))
i <- c(7, 8, 9)
par(mfrow=c(3,2))
getinfo2(names(sort(modelmirna$effectimp.qual, decreasing=TRUE))[i[1]])
getinfo2(names(sort(modelmirnanew$effectimp.qual, decreasing=TRUE))[i[1]])
getinfo2(names(sort(modelmirna$effectimp.qual, decreasing=TRUE))[i[2]])
getinfo2(names(sort(modelmirnanew$effectimp.qual, decreasing=TRUE))[i[2]])
getinfo2(names(sort(modelmirna$effectimp.qual, decreasing=TRUE))[i[3]])
getinfo2(names(sort(modelmirnanew$effectimp.qual, decreasing=TRUE))[i[3]])
par(mfrow=c(1,1))
boxplot(modelmirna$effectimp.quant, modelmirnanew$effectimp.quant)
par(mfrow=c(3,2))
getinfo2(names(sort(modelmirna$effectimp.quant, decreasing=TRUE))[1])
getinfo2(names(sort(modelmirnanew$effectimp.quant, decreasing=TRUE))[1])
getinfo2(names(sort(modelmirna$effectimp.quant, decreasing=TRUE))[2])
getinfo2(names(sort(modelmirnanew$effectimp.quant, decreasing=TRUE))[2])
getinfo2(names(sort(modelmirna$effectimp.quant, decreasing=TRUE))[3])
getinfo2(names(sort(modelmirnanew$effectimp.quant, decreasing=TRUE))[3])
par(mfrow=c(1,1))
par(mfrow=c(3,2))
getinfo3(names(sort(modelmirna$effectimp.qual, decreasing=TRUE))[1])
getinfo3(names(sort(modelmirnanew$effectimp.qual, decreasing=TRUE))[1])
getinfo3(names(sort(modelmirna$effectimp.qual, decreasing=TRUE))[2])
getinfo3(names(sort(modelmirnanew$effectimp.qual, decreasing=TRUE))[2])
getinfo3(names(sort(modelmirna$effectimp.qual, decreasing=TRUE))[3])
getinfo3(names(sort(modelmirnanew$effectimp.qual, decreasing=TRUE))[3])
par(mfrow=c(1,1))
mean(sapply(names(sort(modelmirna$effectimp.qual, decreasing=TRUE))[1:20], getinfo4))
mean(sapply(names(sort(modelmirnanew$effectimp.qual, decreasing=TRUE))[1:20], getinfo4))
mean(sapply(names(sort(modelmirna$effectimp.qual, decreasing=TRUE))[1:100], getinfo4))
mean(sapply(names(sort(modelmirnanew$effectimp.qual, decreasing=TRUE))[1:100], getinfo4))
par(mfrow=c(1,2))
plot(modelmirna$effectimp.quant, modelmirna$effectimp.qual)
cor(modelmirna$effectimp.quant, modelmirna$effectimp.qual, method="spearman")
plot(modelmirnanew$effectimp.quant, modelmirnanew$effectimp.qual)
cor(modelmirnanew$effectimp.quant, modelmirnanew$effectimp.qual, method="spearman")
par(mfrow=c(1,1))
par(mfrow=c(1,2))
plot(log(modelmirna$effectimp.quant), modelmirna$effectimp.qual)
cor(log(modelmirna$effectimp.quant), modelmirna$effectimp.qual, method="spearman")
plot(log(modelmirnanew$effectimp.quant), modelmirnanew$effectimp.qual)
cor(log(modelmirnanew$effectimp.quant), modelmirnanew$effectimp.qual, method="spearman")
par(mfrow=c(1,1))
par(mfrow=c(1,2))
plot(log(pvals), modelmirna$effectimp.qual)
cor(log(pvals), modelmirna$effectimp.qual, method="spearman")
plot(log(pvals), modelmirnanew$effectimp.qual)
cor(log(pvals), modelmirnanew$effectimp.qual, method="spearman")
par(mfrow=c(1,1))
par(mfrow=c(1,2))
plot(pvals[pvals < 0.01], modelmirna$effectimp.qual[pvals < 0.01])
cor(pvals[pvals < 0.01], modelmirna$effectimp.qual[pvals < 0.01], method="spearman")
plot(pvals[pvals < 0.01], modelmirnanew$effectimp.qual[pvals < 0.01])
cor(pvals[pvals < 0.01], modelmirnanew$effectimp.qual[pvals < 0.01], method="spearman")
par(mfrow=c(1,1))
pvalnew_ <- sapply(names(sort(modelmirnanew$effectimp.qual, decreasing=TRUE)), function(x) getinfo2(x, plotit=FALSE))
pvalold_ <- sapply(names(sort(modelmirna$effectimp.qual, decreasing=TRUE)), function(x) getinfo2(x, plotit=FALSE))
par(mfrow=c(1,2))
scatter.smooth(pvalnew_, col="grey")
scatter.smooth(pvalold_, col="grey")
par(mfrow=c(1,1))
sum(pvals[order(modelmirna$effectimp.qual, decreasing=TRUE)[1:20]] < 0.05)
sum(pvals[order(modelmirnanew$effectimp.qual, decreasing=TRUE)[1:20]] < 0.05)
mean(pvals < 0.05)
boxplot(pvals[order(modelmirna$effectimp.quant, decreasing=TRUE)[1:20]],
pvals[order(modelmirnanew$effectimp.quant, decreasing=TRUE)[1:20]])
aha <- rnorm(100)
plot(aha, rep(1,100))
abline(v=replicate(20, mean(aha[sample(1:length(aha), size=2)])), col=2)
aha <- rnorm(100)
plot(aha, rep(1,100))
abline(v=replicate(20, mean(aha[sample(1:length(aha), size=2)])), col=2)
aha <- rnorm(100)
plot(aha, rep(1,100))
abline(v=replicate(20, mean(aha[sample(1:length(aha), size=2)])), col=2)
aha <- rnorm(100)
plot(aha, rep(1,100))
abline(v=replicate(20, mean(aha[sample(1:length(aha), size=2)])), col=2)
aha <- rnorm(100)
plot(aha, rep(1,100))
abline(v=replicate(20, mean(aha[sample(1:length(aha), size=2)])), col=2)
aha <- rnorm(100)
plot(aha, rep(1,100))
abline(v=replicate(20, mean(aha[sample(1:length(aha), size=2)])), col=2)
aha <- rnorm(100)
plot(aha, rep(1,100))
abline(v=replicate(20, mean(aha[sample(1:length(aha), size=2)])), col=2)
aha <- rnorm(100)
plot(aha, rep(1,100))
abline(v=replicate(20, mean(aha[sample(1:length(aha), size=2)])), col=2)
aha <- rnorm(100)
plot(aha, rep(1,100))
abline(v=replicate(20, mean(aha[sample(1:length(aha), size=2)])), col=2)
aha <- rnorm(100)
plot(aha, rep(1,100))
abline(v=replicate(20, mean(aha[sample(1:length(aha), size=2)])), col=2)
aha <- rnorm(100)
plot(aha, rep(1,100))
abline(v=replicate(20, mean(aha[sample(1:length(aha), size=2)])), col=2)
aha <- rnorm(100)
plot(aha, rep(1,100))
abline(v=replicate(20, mean(aha[sample(1:length(aha), size=2)])), col=2)
aha <- rnorm(100)
plot(aha, rep(1,100))
abline(v=replicate(20, mean(aha[sample(1:length(aha), size=2)])), col=2)
aha <- rnorm(100)
plot(aha, rep(1,100))
abline(v=replicate(20, mean(aha[sample(1:length(aha), size=2)])), col=2)
aha <- rnorm(100)
plot(aha, rep(1,100))
abline(v=replicate(20, mean(aha[sample(1:length(aha), size=3)])), col=2)
aha <- rnorm(100)
plot(aha, rep(1,100))
abline(v=replicate(20, mean(aha[sample(1:length(aha), size=3)])), col=2)
aha <- rnorm(100)
plot(aha, rep(1,100))
abline(v=replicate(20, mean(aha[sample(1:length(aha), size=3)])), col=2)
aha <- rnorm(100)
plot(aha, rep(1,100))
abline(v=replicate(20, mean(aha[sample(1:length(aha), size=3)])), col=2)
aha <- rnorm(100)
plot(aha, rep(1,100))
abline(v=replicate(20, mean(aha[sample(1:length(aha), size=3)])), col=2)
aha <- rnorm(100)
plot(aha, rep(1,100))
abline(v=replicate(20, mean(aha[sample(1:length(aha), size=3)])), col=2)
aha <- rnorm(100)
plot(aha, rep(1,100))
abline(v=replicate(20, mean(aha[sample(1:length(aha), size=3)])), col=2)
aha <- rnorm(100)
plot(aha, rep(1,100))
abline(v=replicate(20, mean(aha[sample(1:length(aha), size=3)])), col=2)
aha <- rnorm(100)
plot(aha, rep(1,100))
abline(v=replicate(20, mean(aha[sample(1:length(aha), size=3)])), col=2)
aha <- rnorm(100)
plot(aha, rep(1,100))
abline(v=replicate(20, mean(aha[sample(1:length(aha), size=3)])), col=2)
aha <- rnorm(100)
plot(aha, rep(1,100))
abline(v=replicate(20, mean(aha[sample(1:length(aha), size=3)])), col=2)
aha <- rnorm(100)
plot(aha, rep(1,100))
abline(v=replicate(20, mean(aha[sample(1:length(aha), size=3)])), col=2)
aha <- rnorm(100)
plot(aha, rep(1,100))
abline(v=replicate(20, mean(aha[sample(1:length(aha), size=3)])), col=2)
aha <- rnorm(100)
plot(aha, rep(1,100))
abline(v=replicate(20, mean(aha[sample(1:length(aha), size=3)])), col=2)
aha <- rnorm(100)
plot(aha, rep(1,100))
abline(v=replicate(20, mean(aha[sample(1:length(aha), size=3)])), col=2)
aha <- rnorm(100)
plot(aha, rep(1,100))
abline(v=replicate(20, mean(aha[sample(1:length(aha), size=3)])), col=2)
save(modelmirnanew, file="Z:/modelmirnanew.Rda")
save(modelrnanew, file="Z:/modelrnanew.Rda")
save(modelcnvnew, file="Z:/modelcnvnew.Rda")
rm(list=ls());gc()
rm(list=ls());gc()
# setwd("Z:/Projects/BlockForests/Package/blockForest/")
setwd("D:/Projects/Packages/GitHub/diversityForest")
library("devtools")
mydigest <- function (object, algo = c("md5", "sha1", "crc32", "sha256",
"sha512", "xxhash32", "xxhash64", "murmur32"), serialize = TRUE,
file = FALSE, length = Inf, skip = "auto", ascii = FALSE,
raw = FALSE, seed = 0, errormode = c("stop", "warn", "silent"))
{
file.access <- R.utils::fileAccess
algo <- match.arg(algo)
errormode <- match.arg(errormode)
.errorhandler <- function(txt, obj = "", mode = "stop") {
if (mode == "stop") {
stop(txt, obj, call. = FALSE)
}
else if (mode == "warn") {
warning(txt, obj, call. = FALSE)
return(invisible(NA))
}
else {
return(invisible(NULL))
}
}
if (is.infinite(length)) {
length <- -1
}
if (is.character(file) && missing(object)) {
object <- file
file <- TRUE
}
if (serialize && !file) {
object <- if ("nosharing" %in% names(formals(base::serialize)))
base::serialize(object, connection = NULL, ascii = ascii,
nosharing = TRUE)
else base::serialize(object, connection = NULL, ascii = ascii)
if (any(!is.na(pmatch(skip, "auto")))) {
if (ascii) {
skip <- which(object[1:30] == as.raw(10))[4]
}
else {
skip <- 14
}
}
}
else if (!is.character(object) && !inherits(object, "raw")) {
return(.errorhandler(paste("Argument object must be of type character",
"or raw vector if serialize is FALSE"), mode = errormode))
}
if (file && !is.character(object))
return(.errorhandler("file=TRUE can only be used with a character object",
mode = errormode))
algoint <- switch(algo, md5 = 1, sha1 = 2, crc32 = 3, sha256 = 4,
sha512 = 5, xxhash32 = 6, xxhash64 = 7, murmur32 = 8)
if (file) {
algoint <- algoint + 100
object <- path.expand(object)
if (!file.exists(object)) {
return(.errorhandler("The file does not exist: ",
object, mode = errormode))
}
if (!isTRUE(!file.info(object)$isdir)) {
return(.errorhandler("The specified pathname is not a file: ",
object, mode = errormode))
}
if (file.access(object, 4)) {
return(.errorhandler("The specified file is not readable: ",
object, mode = errormode))
}
}
if (is.character(skip))
skip <- 0
val <- .Call(digest_impl, object, as.integer(algoint), as.integer(length),
as.integer(skip), as.integer(raw), as.integer(seed))
return(val)
}
library(digest)
R.utils::reassignInPackage("digest", "digest", mydigest)
roxygen2::roxygenise()
q()
rm(list=ls());gc()
# setwd("Z:/Projects/BlockForests/Package/blockForest/")
setwd("Z:/Packages/diversityForest_Package/diversityForest")
library("devtools")
find_rtools(T)
find_rtools(T)
sessionInfo()
rm(list=ls());gc()
# setwd("Z:/Projects/BlockForests/Package/blockForest/")
setwd("Z:/Packages/diversityForest_Package/diversityForest")
library("devtools")
find_rtools(T)
mydigest <- function (object, algo = c("md5", "sha1", "crc32", "sha256",
"sha512", "xxhash32", "xxhash64", "murmur32"), serialize = TRUE,
file = FALSE, length = Inf, skip = "auto", ascii = FALSE,
raw = FALSE, seed = 0, errormode = c("stop", "warn", "silent"))
{
file.access <- R.utils::fileAccess
algo <- match.arg(algo)
errormode <- match.arg(errormode)
.errorhandler <- function(txt, obj = "", mode = "stop") {
if (mode == "stop") {
stop(txt, obj, call. = FALSE)
}
else if (mode == "warn") {
warning(txt, obj, call. = FALSE)
return(invisible(NA))
}
else {
return(invisible(NULL))
}
}
if (is.infinite(length)) {
length <- -1
}
if (is.character(file) && missing(object)) {
object <- file
file <- TRUE
}
if (serialize && !file) {
object <- if ("nosharing" %in% names(formals(base::serialize)))
base::serialize(object, connection = NULL, ascii = ascii,
nosharing = TRUE)
else base::serialize(object, connection = NULL, ascii = ascii)
if (any(!is.na(pmatch(skip, "auto")))) {
if (ascii) {
skip <- which(object[1:30] == as.raw(10))[4]
}
else {
skip <- 14
}
}
}
else if (!is.character(object) && !inherits(object, "raw")) {
return(.errorhandler(paste("Argument object must be of type character",
"or raw vector if serialize is FALSE"), mode = errormode))
}
if (file && !is.character(object))
return(.errorhandler("file=TRUE can only be used with a character object",
mode = errormode))
algoint <- switch(algo, md5 = 1, sha1 = 2, crc32 = 3, sha256 = 4,
sha512 = 5, xxhash32 = 6, xxhash64 = 7, murmur32 = 8)
if (file) {
algoint <- algoint + 100
object <- path.expand(object)
if (!file.exists(object)) {
return(.errorhandler("The file does not exist: ",
object, mode = errormode))
}
if (!isTRUE(!file.info(object)$isdir)) {
return(.errorhandler("The specified pathname is not a file: ",
object, mode = errormode))
}
if (file.access(object, 4)) {
return(.errorhandler("The specified file is not readable: ",
object, mode = errormode))
}
}
if (is.character(skip))
skip <- 0
val <- .Call(digest_impl, object, as.integer(algoint), as.integer(length),
as.integer(skip), as.integer(raw), as.integer(seed))
return(val)
}
library(digest)
R.utils::reassignInPackage("digest", "digest", mydigest)
install.packages("R.utils")
R.utils::reassignInPackage("digest", "digest", mydigest)
roxygen2::roxygenise()
roxygen2::roxygenise()
q()
rm(list=ls());gc()
# setwd("Z:/Projects/BlockForests/Package/blockForest/")
setwd("Z:/Packages/diversityForest_Package/diversityForest")
library("devtools")
# find_rtools(T)
mydigest <- function (object, algo = c("md5", "sha1", "crc32", "sha256",
"sha512", "xxhash32", "xxhash64", "murmur32"), serialize = TRUE,
file = FALSE, length = Inf, skip = "auto", ascii = FALSE,
raw = FALSE, seed = 0, errormode = c("stop", "warn", "silent"))
{
file.access <- R.utils::fileAccess
algo <- match.arg(algo)
errormode <- match.arg(errormode)
.errorhandler <- function(txt, obj = "", mode = "stop") {
if (mode == "stop") {
stop(txt, obj, call. = FALSE)
}
else if (mode == "warn") {
warning(txt, obj, call. = FALSE)
return(invisible(NA))
}
else {
return(invisible(NULL))
}
}
if (is.infinite(length)) {
length <- -1
}
if (is.character(file) && missing(object)) {
object <- file
file <- TRUE
}
if (serialize && !file) {
object <- if ("nosharing" %in% names(formals(base::serialize)))
base::serialize(object, connection = NULL, ascii = ascii,
nosharing = TRUE)
else base::serialize(object, connection = NULL, ascii = ascii)
if (any(!is.na(pmatch(skip, "auto")))) {
if (ascii) {
skip <- which(object[1:30] == as.raw(10))[4]
}
else {
skip <- 14
}
}
}
else if (!is.character(object) && !inherits(object, "raw")) {
return(.errorhandler(paste("Argument object must be of type character",
"or raw vector if serialize is FALSE"), mode = errormode))
}
if (file && !is.character(object))
return(.errorhandler("file=TRUE can only be used with a character object",
mode = errormode))
algoint <- switch(algo, md5 = 1, sha1 = 2, crc32 = 3, sha256 = 4,
sha512 = 5, xxhash32 = 6, xxhash64 = 7, murmur32 = 8)
if (file) {
algoint <- algoint + 100
object <- path.expand(object)
if (!file.exists(object)) {
return(.errorhandler("The file does not exist: ",
object, mode = errormode))
}
if (!isTRUE(!file.info(object)$isdir)) {
return(.errorhandler("The specified pathname is not a file: ",
object, mode = errormode))
}
if (file.access(object, 4)) {
return(.errorhandler("The specified file is not readable: ",
object, mode = errormode))
}
}
if (is.character(skip))
skip <- 0
val <- .Call(digest_impl, object, as.integer(algoint), as.integer(length),
as.integer(skip), as.integer(raw), as.integer(seed))
return(val)
}
library(digest)
R.utils::reassignInPackage("digest", "digest", mydigest)
roxygen2::roxygenise()
library(diversityForest)
?interactionfor
## Load package:
library("diversityForest")
## Set seed to make results reproducible:
set.seed(1234)
## Construct interaction forests and calculate EIM values:
# Binary outcome:
data(zoo)
modelcat <- interactionfor(dependent.variable.name = "type", data = zoo,
num.trees = 20)
modelcar
modelcat
modelcat <- interactionfor(dependent.variable.name = "type", data = zoo)
plot(modelcar)
plot(modelcat)
remove.packages("diversityForest")
remove.packages("diversityForest")
library(diversityForest)
?interactionfor
## Not run:
## Load package:
library("diversityForest")
## Set seed to make results reproducible:
set.seed(1234)
## Construct interaction forests and calculate EIM values:
# Binary outcome:
data(zoo)
modelcat <- interactionfor(dependent.variable.name = "type", data = zoo,
num.trees = 20)
modelcat
modelcat <- interactionfor(dependent.variable.name = "type", data = zoo)
modelcat
