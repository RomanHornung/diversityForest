# Set the canvas size
plot(1,1, xlim=c(0,10), ylim=c(0,10), type="n", ann=FALSE)
# Draw the head
points(5,8, pch=20, cex=2)
# Draw the eyes
points(4,8.5, pch=1, cex=1)
points(6,8.5, pch=1, cex=1)
# Draw the nose
points(5,8, pch=3, cex=1)
# Draw the mouth
lines(c(4.5, 5.5), c(7.5, 7.5))
# Draw the mustache
lines(c(4.5, 5.5), c(7, 7))
lines(c(5.5, 6.5), c(7, 7))
# Draw the hair
points(3:7, 9, pch=20, cex=1)
# Add a label
text(5,9.5, "Lemmy Kilmister", cex=1.5)
}
draw_lemmy()
draw_lemmy <- function() {
# Set the canvas size
plot(1,1, xlim=c(0,10), ylim=c(0,10), type="n", ann=FALSE)
# Draw the head
points(5,8, pch=20, cex=2)
# Draw the eyes
points(4,8.5, pch=1, cex=1)
points(6,8.5, pch=1, cex=1)
# Draw the nose
points(5,8, pch=3, cex=1)
# Draw the mouth
lines(c(4.5, 5.5), c(7.5, 7.5))
# Draw the mustache
lines(c(4.5, 5.5), c(7, 7))
lines(c(5.5, 6.5), c(7, 7))
# Draw the hair
points(3:7, rep(9, 7), pch=20, cex=1)
# Add a label
text(5,9.5, "Lemmy Kilmister", cex=1.5)
}
draw_lemmy()
draw_lemmy <- function() {
# Set the canvas size
plot(1,1, xlim=c(0,10), ylim=c(0,10), type="n", ann=FALSE)
# Draw the head
points(5,8, pch=20, cex=2)
# Draw the eyes
points(4,8.5, pch=1, cex=1)
points(6,8.5, pch=1, cex=1)
# Draw the nose
points(5,8, pch=3, cex=1)
# Draw the mouth
lines(c(4.5, 5.5), c(7.5, 7.5))
# Draw the mustache
lines(c(4.5, 5.5), c(7, 7))
lines(c(5.5, 6.5), c(7, 7))
# Draw the hair
points(3:7, rep(9, 5), pch=20, cex=1)
# Add a label
text(5,9.5, "Lemmy Kilmister", cex=1.5)
}
draw_lemmy()
draw_lemmy <- function() {
# Set the canvas size
plot(1,1, xlim=c(0,10), ylim=c(0,10), type="n", ann=FALSE)
# Draw the head
polygon(x=c(4,6,6,4), y=c(7,7,9,9), density=20, col="lightgrey")
# Draw the eyes
points(4,8.5, pch=1, cex=1, col="black")
points(6,8.5, pch=1, cex=1, col="black")
# Draw the nose
points(5,8, pch=3, cex=1, col="black")
# Draw the mouth
lines(c(4.5, 5.5), c(7.5, 7.5), lwd=2, col="black")
# Draw the mustache
lines(c(4.5, 5.5), c(7, 7), lwd=2, col="black")
lines(c(5.5, 6.5), c(7, 7), lwd=2, col="black")
# Draw the hair
polygon(x=c(3,5,7,7,5,3), y=c(9,9,8,7,6,6), density=20, col="black")
# Add a label
text(5,9.5, "Lemmy Kilmister", cex=1.5, col="black")
}
draw_lemmy()
dev.off()
draw_lemmy()
draw_lemmy <- function() {
# Set the canvas size
plot(1,1, xlim=c(0,10), ylim=c(0,10), type="n", ann=FALSE)
# Draw the head
polygon(x=c(4,6,6,4), y=c(7,7,9,9), density=20, col="lightgrey")
# Draw the eyes
points(4,8.5, pch=1, cex=1, col="black")
points(6,8.5, pch=1, cex=1, col="black")
# Draw the nose
points(5,8, pch=3, cex=1, col="black")
# Draw the mouth
lines(c(4.5, 5.5), c(7.5, 7.5), lwd=2, col="black")
# Draw the mustache
lines(c(4.5, 5.5), c(7, 7), lwd=2, col="black")
lines(c(5.5, 6.5), c(7, 7), lwd=2, col="black")
# Draw the cigarette
lines(c(4.8, 5.2), c(7.2, 7.2), lwd=1, col="grey")
points(5,7.2, pch=20, cex=0.5, col="orange")
# Draw the hair
polygon(x=c(3,5,7,7,5,3), y=c(9,9,8,7,6,6), density=20, col="black")
# Add a label
text(5,9.5, "Lemmy Kilmister", cex=1.5, col="black")
}
draw_lemmy()
draw_lemmy()
draw_lemmy()
draw_lemmy <- function() {
# Set the canvas size
plot(1,1, xlim=c(0,10), ylim=c(0,10), type="n", ann=FALSE)
# Draw the head
polygon(x=c(4,6,6,4), y=c(7,7,9,9), density=20, col="lightgrey")
# Draw the eyes
points(4,8.5, pch=1, cex=1, col="black")
points(6,8.5, pch=1, cex=1, col="black")
# Draw the nose
points(5,8, pch=3, cex=1, col="black")
# Draw the mouth
lines(c(4.5, 5.5), c(7.5, 7.5), lwd=2, col="black")
# Draw the mustache
lines(c(4.5, 5.5), c(7, 7), lwd=2, col="black")
lines(c(5.5, 6.5), c(7, 7), lwd=2, col="black")
# Draw the cigarette
lines(c(4.8, 5.2), c(7.2, 7.2), lwd=1, col="red")
points(5,7.2, pch=20, cex=0.5, col="red")
# Draw the hair
polygon(x=c(3,5,7,7,5,3), y=c(9,9,8,7,6,6), density=20, col="black")
# Add a label
text(5,9.5, "Lemmy Kilmister", cex=1.5, col="black")
}
draw_lemmy()
play_alle_meine_entchen <- function() {
library(tuneR)
# Define the notes and durations of the song
notes <- c(72, 71, 72, 72, 74, 74, 74, 76, 77, 77, 77, 77,
77, 75, 75, 75, 75, 75, 73, 73, 73, 73, 72, 72, 72, 72, 72, 71, 71, 71, 71, 71,
72, 72, 72, 72, 74, 74, 74, 76, 77, 77, 77, 77, 77, 75, 75, 75, 75, 75, 73, 73, 73, 73, 72, 72, 72, 72, 72)
durations <- c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5)
# Play the song
play(notes, durations, 1)
}
play_alle_meine_entchen()
install.packages("tuneR")
play_alle_meine_entchen()
?play
playAlleMeineEntchen <- function() {
library(tuneR)
# Define the notes and durations for the tune
notes <- c("C5", "C5", "D5", "C5", "F5", "E5", "C5", "C5", "D5", "C5", "G5", "F5",
"C5", "C5", "C6", "A5", "F5", "E5", "D5", "B4", "B4", "C5", "A4", "F4", "D4")
durations <- c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
# Play the tune
play(notes, durations)
}
playAlleMeineEntchen()
playAlleMeineEntchen <- function() {
library(tuneR)
# Define the notes and durations for the tune
notes <- c("C5", "C5", "D5", "C5", "F5", "E5", "C5", "C5", "D5", "C5", "G5", "F5",
"C5", "C5", "C6", "A5", "F5", "E5", "D5", "B4", "B4", "C5", "A4", "F4", "D4")
durations <- c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
# Convert the notes to a melody object
melody <- noteSeq(notes, durations)
# Play the tune
soundsc(melody, sampling=11025, sound=NULL, l=NULL)
}
playAlleMeineEntchen()
playAlleMeineEntchen <- function() {
library(tuneR)
# Define the notes and durations for the tune
notes <- c("C5", "C5", "D5", "C5", "F5", "E5", "C5", "C5", "D5", "C5", "G5", "F5",
"C5", "C5", "C6", "A5", "F5", "E5", "D5", "B4", "B4", "C5", "A4", "F4", "D4")
durations <- c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
# Convert the notes to a melody object
melody <- rep(NA, length(notes))
for (i in 1:length(notes)) {
melody[i] <- note(notes[i], durations[i])
}
# Play the tune
soundsc(melody, sampling=11025, sound=NULL, l=NULL)
}
playAlleMeineEntchen()
playAlleMeineEntchen <- function() {
library(tuneR)
# Define the notes and durations for the tune
notes <- c("C5", "C5", "D5", "C5", "F5", "E5", "C5", "C5", "D5", "C5", "G5", "F5",
"C5", "C5", "C6", "A5", "F5", "E5", "D5", "B4", "B4", "C5", "A4", "F4", "D4")
durations <- c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
# Convert the notes to a melody object
melody <- seq(notes, durations)
# Play the tune
soundsc(melody, sampling=11025, sound=NULL, l=NULL)
}
playAlleMeineEntchen()
playAlleMeineEntchen <- function() {
library(tuneR)
# Define the notes and durations for the tune
notes <- c("C5", "C5", "D5", "C5", "F5", "E5", "C5", "C5", "D5", "C5", "G5", "F5",
"C5", "C5", "C6", "A5", "F5", "E5", "D5", "B4", "B4", "C5", "A4", "F4", "D4")
durations <- c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
# Convert the notes to a melody object
melody <- tune(notes, durations)
# Play the tune
soundsc(melody, sampling=11025, sound=NULL, l=NULL)
}
playAlleMeineEntchen()
playAlleMeineEntchen <- function() {
library(tuneR)
# Define the notes and durations for the tune
notes <- c("C5", "C5", "D5", "C5", "F5", "E5", "C5", "C5", "D5", "C5", "G5", "F5",
"C5", "C5", "C6", "A5", "F5", "E5", "D5", "B4", "B4", "C5", "A4", "F4", "D4")
durations <- c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
# Convert the notes to a melody object
melody <- rep(NA, length(notes))
for (i in 1:length(notes)) {
melody[i] <- note(notes[i], durations[i])
}
# Play the tune
soundsc(melody, sampling=11025, sound=NULL, l=NULL)
}
playAlleMeineEntchen()
playAlleMeineEntchen <- function() {
library(Rmusic)
# Define the notes and durations for the tune
notes <- c("C5", "C5", "D5", "C5", "F5", "E5", "C5", "C5", "D5", "C5", "G5", "F5",
"C5", "C5", "C6", "A5", "F5", "E5", "D5", "B4", "B4", "C5", "A4", "F4", "D4")
durations <- c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
# Convert the notes to a melody object
melody <- rep(NA, length(notes))
for (i in 1:length(notes)) {
melody[i] <- note(notes[i], durations[i])
}
# Play the tune
play(melody)
}
pla
playAlleMeineEntchen()
install.packages("Rmusic")
devtools::install_github("keithmcnulty/Rmusic", build_vignettes = TRUE)
playAlleMeineEntchen()
playAlleMeineEntchen <- function() {
library(tuneR)
# Load the MIDI file
midi <- readMIDI("D:/alle_meine_entchen.mid")
# Play the MIDI file
play(midi)
}
playAlleMeineEntchen()
playAlleMeineEntchen <- function() {
library(tuneR)
# Load the MIDI file
midi <- readMidi("D:/alle_meine_entchen.mid")
# Play the MIDI file
play(midi)
}
playAlleMeineEntchen()
# Load the MIDI file
midi <- readMIDI("D:/alle_meine_entchen.mid")
# Load the MIDI file
midi <- readMidi("D:/alle_meine_entchen.mid")
class(midi)
midi
playAlleMeineEntchen <- function() {
library(tuneR)
# Load the MIDI file
midi <- readMidi("D:/alle_meine_entchen.mid")
# Play the MIDI file
play(midi)
}
library(ggplot2)
draw_rose <- function(n_petals = 8, center = c(0,0),
radius = 1, start_angle = 0) {
angles <- seq(start_angle, 360 + start_angle, length.out = n_petals*2 + 1)
df <- data.frame(angle = angles, radius = c(rep(radius, n_petals),
rep(radius/2, n_petals)))
df$x <- df$radius * cos(df$angle * pi/180) + center[1]
df$y <- df$radius * sin(df$angle * pi/180) + center[2]
ggplot() +
geom_path(data = df, aes(x = x, y = y)) +
coord_fixed()
}
draw_rose(n_petals = 16, center = c(1,1), radius = 2, start_angle = 45)
library(ggplot2)
draw_rose <- function(n_petals = 8, center = c(0,0),
radius = 1, start_angle = 0) {
angles <- seq(start_angle, 360 + start_angle, length.out = n_petals*2 + 1)
df <- data.frame(angle = angles, radius = c(rep(radius, n_petals),
rep(radius/2, n_petals)))
df$x <- df$radius * cos(df$angle * pi/180) + center[1]
df$y <- df$radius * sin(df$angle * pi/180) + center[2]
ggplot() +
geom_path(data = df, aes(x = x, y = y)) +
coord_fixed() +
theme_void()
}
draw_rose(n_petals = 16, center = c(1,1), radius = 2, start_angle = 45)
draw_rose <- function(n_petals = 8, center = c(0,0),
radius = 1, start_angle = 0) {
angles <- seq(start_angle, 360 + start_angle, length.out = n_petals*2)
df <- data.frame(angle = angles, radius = c(rep(radius, n_petals),
rep(radius/2, n_petals)))
df$x <- df$radius * cos(df$angle * pi/180) + center[1]
df$y <- df$radius * sin(df$angle * pi/180) + center[2]
ggplot() +
geom_path(data = df, aes(x = x, y = y)) +
coord_fixed() +
theme_void()
}
draw_rose(n_petals = 16, center = c(1,1), radius = 2, start_angle = 45)
draw_rose(n_petals = 16, center = c(1,1), radius = 2, start_angle = 45)
draw_rose(n_petals = 16, center = c(1,1), radius = 2, start_angle = 45)
draw_rose(n_petals = 10, center = c(1,1), radius = 2, start_angle = 45)
draw_rose(n_petals = 4, center = c(1,1), radius = 2, start_angle = 45)
draw_rose <- function(n_petals = 8, center = c(0,0), radius = 1) {
angles <- seq(0, 360, length.out = n_petals + 1)
x <- radius * cos(angles * pi/180) + center[1]
y <- radius * sin(angles * pi/180) + center[2]
data <- data.frame(x, y)
ggplot() +
geom_path(data = data, aes(x = x, y = y)) +
coord_fixed() +
theme_void()
}
draw_rose(n_petals = 16, center = c(1,1), radius = 2)
draw_rose <- function(n_petals = 8, center = c(0,0), radius = 1) {
angles <- seq(0, 360, length.out = n_petals + 1)
x <- radius * cos(angles * pi/180) + center[1]
y <- radius * sin(angles * pi/180) + center[2]
data <- data.frame(x, y)
ggplot() +
geom_path(data = data, aes(x = x, y = y)) +
coord_fixed() +
theme_void()
}
draw_rose(n_petals = 16, center = c(1,1), radius = 2)
draw_rose(n_petals = 10, center = c(1,1), radius = 2)
draw_rose(n_petals = 4, center = c(1,1), radius = 2)
draw_rose(n_petals = 160, center = c(1,1), radius = 2)
draw_rose <- function(n_petals = 8, center = c(0,0), radius = 1) {
angles <- seq(0, 360, length.out = n_petals + 1)
radii <- c(rep(radius, n_petals), radius/2)
df <- data.frame(angle = angles, radius = radii)
df$x <- df$radius * cos(df$angle * pi/180) + center[1]
df$y <- df$radius * sin(df$angle * pi/180) + center[2]
ggplot() +
geom_path(data = df, aes(x = x, y = y)) +
coord_fixed() +
theme_void()
}
draw_rose <- function(n_petals = 8, center = c(0,0), radius = 1) {
angles <- seq(0, 360, length.out = n_petals + 1)
radii <- c(rep(radius, n_petals), radius/2)
df <- data.frame(angle = angles, radius = radii)
df$x <- df$radius * cos(df$angle * pi/180) + center[1]
df$y <- df$radius * sin(df$angle * pi/180) + center[2]
ggplot() +
geom_path(data = df, aes(x = x, y = y)) +
coord_fixed() +
theme_void()
}
draw_rose(n_petals = 16, center = c(1,1), radius = 2)
draw_rose <- function(n_petals = 8, center = c(0,0), radius = 1) {
angles <- seq(0, 360, length.out = n_petals + 1)
radii <- c(rep(radius, n_petals), radius/2)
df <- data.frame(angle = angles, radius = radii)
df$x <- df$radius * cos(df$angle * pi/180) + center[1]
df$y <- df$radius * sin(df$angle * pi/180) + center[2]
ggplot() +
geom_path(data = df, aes(x = x, y = y)) +
coord_fixed() +
theme_void()
}
draw_rose(n_petals = 16, center = c(1,1), radius = 2)
nchar("iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii")
(19 + (10/60)) - (13 + (56/60))
(19 + (10/60)) - (13 + (56/60))  + 2
ls()
load("D:/Projects/DESTATIS/PredErrorComplex/PPerfEstComplex/simulations/hierpr/results/intermediate_results/results.Rda")
ls()
results
ls()
wd <- getwd()
ls()
x1 <- 1:5
x2 <- 10:14
depp <- data.frame(x1=x1, x2=x2, ui=1234)
depp
6*25
8*25
8-2.75
nchar("1.Apfelstrudelhund")
17 + (34/60) - (10 + (5/60))
choose(12^6,2)
choose(12^6,2)*1000000000
choose(12^6,2)*1000000000
choose(12^6,2)*1000000000
choose(12^6,2)/1000000000
30000/12000000
10030000/12000000
100*30000/12000000
1/(30000/12000000)
choose(30000,2)
0.05/choose(30000,2)
exp(log(0.05)/10)
tolower("No Unbiased Estimator of the Variance of K-Fold Cross-Validation")
tolower("CIUBOTARU")
library("diversityForest")
?plotPair
remove.packages("diversityForest")
remove.packages("diversityForest")
library("diversityForest")
library("remotes")
library("diversityForest")
install_github("RomanHornung/diversityForest")
library("diversityForest")
?plotPair
remove.packages("diversityForest")
remove.packages("diversityForest")
library("remotes")
install_github("RomanHornung/diversityForest")
library(diversityForest)
?plotPair
library("diversityForest")
?interactionfor
160
350+2*40
qnorm(2)
qnorm(0)
qnorm(0.5)
plot(c(0,0), c(0,1), ty="l")
?text
plot(c(0,0), c(0,1), ty="l")
text(rep(), qnorm((1:9)/10), labels=(1:9)/10)
qnorm((1:9)/10)
plot(c(0,0), c(-1.3,1.3), ty="l")
text(rep(0, 9), qnorm((1:9)/10), labels=(1:9)/10)
text(rep(0, 9), qnorm(c(0.01, 0.05, (1:9)/10, 0.95, 0.99)), labels=c(0.01, 0.05, (1:9)/10, 0.95, 0.99))
qnorm(c(0.01, 0.05, (1:9)/10, 0.95, 0.99))
plot(c(0,0), c(-2.5,2.5), ty="l")
qnorm(c(0.01, 0.05, (1:9)/10, 0.95, 0.99))
text(rep(0, 9), qnorm(c(0.01, 0.05, (1:9)/10, 0.95, 0.99)), labels=c(0.01, 0.05, (1:9)/10, 0.95, 0.99))
librar("ROCR")
library("ROCR")
install.packages("ROCR")
?performance
library(ROCR)
?performance
library(ROCR)
data(ROCR.simple)
pred <- prediction( ROCR.simple$predictions, ROCR.simple$labels)
pred
perf <- performance(pred,"tpr","fpr")
perf
plot(perf)
# precision/recall curve (x-axis: recall, y-axis: precision)
perf <- performance(pred, "prec", "rec")
perf
plot(perf)
# sensitivity/specificity curve (x-axis: specificity,
# y-axis: sensitivity)
perf <- performance(pred, "sens", "spec")
perf
plot(perf)
names(perf)
slotNames(perf)
perf@x.values
perf@y.values
plot(perf@x.values, perf@y.values)
plot(perf@x.values[[1]], perf@y.values[[1]])
plot(1-perf@x.values[[1]], perf@y.values[[1]])
plot(qnorm(perf@x.values[[1]]), qnorm(perf@y.values[[1]]))
plot(pnorm(perf@x.values[[1]]), pnorm(perf@y.values[[1]]))
plot(1-perf@x.values[[1]], perf@y.values[[1]])
plot(qnorm(1-perf@x.values[[1]]), qnorm(perf@y.values[[1]]))
plot(1-perf@x.values[[1]], perf@y.values[[1]])
plot(qnorm(1-perf@x.values[[1]]), qnorm(perf@y.values[[1]]))
library(ROCR)
data(ROCR.simple)
pred <- prediction( ROCR.simple$predictions, ROCR.simple$labels)
pred
perf <- performance(pred,"tpr","fpr")
perf
plot(perf)
plot(perf@x.values[[1]], perf@y.values[[1]])
plot(qnorm(perf@x.values[[1]]), qnorm(perf@y.values[[1]]))
data(ROCR.hiv)
predictions <- ROCR.hiv$hiv.svm$predictions
labels <- ROCR.hiv$hiv.svm$labels
pred <- prediction(predictions, labels)
pred
plot(perf@x.values[[1]], perf@y.values[[1]])
plot(qnorm(perf@x.values[[1]]), qnorm(perf@y.values[[1]]))
perf <- performance(pred, "tpr", "fpr")
perf
plot(perf@x.values[[1]], perf@y.values[[1]])
plot(qnorm(perf@x.values[[1]]), qnorm(perf@y.values[[1]]))
plot(c(0,0), c(-2.5,2.5), ty="l")
text(rep(0, 9), qnorm(c(0.01, 0.05, (1:9)/10, 0.95, 0.99)), labels=c(0.01, 0.05, (1:9)/10, 0.95, 0.99))
plot(perf@x.values[[1]], perf@y.values[[1]])
plot(qnorm(perf@x.values[[1]]), qnorm(perf@y.values[[1]]))
plot(qnorm(1-perf@x.values[[1]]), qnorm(perf@y.values[[1]]))
plot(qnorm(1-perf@x.values[[1]]), qnorm(1-perf@y.values[[1]]))
?interactionfor
setwd("D:/Projects/Packages/GitHub/diversityForest")
getwd()
